var foo;var getName;getName = function () {   alert(5);}foo = function () {   var getName;   getName = function () {      alert(1);   }   return this;}foo.getName = function () {   alert(2);};getName = function () {   alert(3);}getName = function () {   alert(4);}var a = 10;function a() {}console.log(typeof a)fn()var a = 1;console.log('a')function fn() {   console.log(this.a)}//0701 防抖函数function debounce(){   let valid;   clearTimeout(valid)   valid = setTimeout(()=>{      //tood   },500)}//0701 节流函数function throtto(){   let valid = true;   return function (){      if(!valid){         return false;      }      valid = false;      setTimeout(()=>{         //todo         valid = true      },300)   }}throtto()()//防抖函数function a() {   let timeout   function todo() {   }   function debounce() {      clearTimeout(timeout)      timeout = setTimeout(() => {         todo()      }, 100)   }}a.debounce()//节流函数function b() {   let valid = true;   return function () {      if (!valid) {         return false;      }      valid = false;      setTimeout(() => {         fn();         valid = true;      }, 1000)   }}// ------------async function async1() {   console.log("async1 start");   await async2();   console.log("async1 end");   return 'async return';}async function async2() {   console.log("async2");}console.log("script start");setTimeout(function () {   console.log("setTimeout");}, 0);async1().then(function (message) {   console.log(message)});new Promise(function (resolve) {   console.log("promise1");   resolve();}).then(function () {   console.log("promise2");});console.log("script end");// --------setTimeout(function () {   console.log('8')}, 0)async function async1() {   console.log('1')   const data = await async2()   console.log('6')   return data}async function async2() {   return new Promise(resolve => {      console.log('2')      resolve('async2的结果')   }).then(data => {      console.log('4')      return data   })}async1().then(data => {   console.log('7')   console.log(data)})new Promise(function (resolve) {   console.log('3')   resolve()}).then(function () {   console.log('5')})//illegalscript start  async1 start  async2  promise1  illegalscript end  async1 end  promise2// setTimeout//script start  async2 end  Promise  script end  async1 end  promise1  promise2  setTimeout//script start  async1 start  async2 promise1  script end  async1 end  promise2  setTimeout//40var x = 3;var y = 4;var obj = {   x: 1,   y: 6,   getX: function () {      var x = 5;      return function () {         return this.x;      }();   },   getY: function () {      let y = 7;      return this.y;   }}console.log(obj.getX()) //3console.log(obj.getY()) //6// -------var name = "the window";var object = {   name: "My Object",   getName: function () {      return this.name;   }}object.getName(); //My Object(object.getName)(); //My Object   ******console.log(object.getName() === (object.getName)())(object.getName = object.getName)();//the window// -------var a = 10;var obt = {   a: 20,   fn: function () {      var a = 30;      console.log(this.a)   }}obt.fn(); //20obt.fn.call(); //10(obt.fn)();  //20(obt.fn, obt.fn)(); //10   *****new obt.fn(); //undefined   *****// -------function a(xx) {   this.x = xx;   return this};var x = a(5);var y = a(6);console.log(x.x) //undefined   *******console.log(y.x)  //6//---------const object = {   who: 'World',   greet() {      console.log('this1', this)      return `Hello, ${this.who}!`;   },   farewell: () => {      console.log('this,', this)      return `Goodbye, ${this.who}!`;   }};console.log(object.greet()); // hello worldconsole.log(object.farewell()); // goodbye undefined  &&&&&&&&7//----------var length = 4;function callback() {   console.log(this.length); // 输出什么}const object = {   length: 5,   method() {      arguments[0]();   }};object.method(callback, 1, 2); //3 *******//----------setTimeout(function () {   console.log(1)}, 0);new Promise(function (resolve, reject) {   console.log(2)   for (var i = 0; i < 10000; i++) {      if (i === 10) {         console.log(10)      }      i == 9999 && resolve();   }   console.log(3)}).then(function () {   console.log(4)})console.log(5);//-------for (var i = 0; i < 5; i++) {   setTimeout(function () {      console.log(i);   }, 1000);}console.log(i)//------var arr1 = [1, 2, 5, 8];var arr2 = arr1;var str1 = arr1[2];console.log(arr2);//1,2,5,8console.log(str1);//5arr2[4] = 99;str1 = 6;console.log(arr1);//1,2,5,8,99console.log(arr1[2]);//5//-----console.log(a)//undefinedvar a = 0if (true) {   console.log(a)   a = 1   console.log(a)   function a() {   }   console.log(a)   a = 21   console.log(a)}console.log(a)//------var a = 10, b = 11, c = 12;console.log(test)function test(a) {   a = 1   var b = 2   c = 3}test(5)console.log(a) //a为形参 为私有变量console.log(b)console.log(c)//----f1();console.log(b);console.log(c);console.log(a);function f1() {   var a = b = c = 9;   console.log(a);      // 9 9 9 9 9 (not define)   console.log(b);      // 原因只有a是局部变量   console.log(c);      // b,c都是全局变量}let arr = [1, [2, 3, [4, 5]]]function flatten(arr) {   return arr.join(',').split(',').map(function (item) {      return parseInt(item);   })}flatten(arr)//------ClassEventEmitter{   constructor()   {      listener:{      }   }   //订阅者   on(type, fn)   {      if (!this.listener[type]) {         this.listener[type] = []      }      this.listener[type].push(fn)   }   //发布者   emit(type, ...args)   {      if (this.listeners[type]) {         this.listener[type].forEach(item => {            item(...args)         })      }   }   //删除事件   off(type)   {      if (this.listener[type]) {         delete this.listeners[type]      }   }}//callFunction.prototype.call = function (context, ...args) {   var context = context || window   //改变this指向.   context.__proto__.fn = this;   var res = context.fn(...args)   delete context.__proto__.fn;   return res   var foo;   var getName;   getName = function () {      alert(5);   }   foo = function () {      var getName;      getName = function () {         alert(1);      }      return this;   }   foo.getName = function () {      alert(2);   };   getName = function () {      alert(3);   }   getName = function () {      alert(4);   }   var a = 10;   function a() {   }   console.log(typeof a)   fn()   var a = 1;   console.log('a')   function fn() {      console.log(this.a)   }//防抖函数   function a() {      let timeout      function todo() {      }      function debounce() {         clearTimeout(timeout)         timeout = setTimeout(() => {            todo()         }, 100)      }   }   a.debounce()//节流函数   function b() {      let valid = true;      return function () {         if (!valid) {            return false;         }         valid = false;         setTimeout(() => {            fn();            valid = true;         }, 1000)      }   }// ------------   async function async1() {      console.log("async1 start");      await async2();      console.log("async1 end");      return 'async return';   }   async function async2() {      console.log("async2");   }   console.log("script start");   setTimeout(function () {      console.log("setTimeout");   }, 0);   async1().then(function (message) {      console.log(message)   });   new Promise(function (resolve) {      console.log("promise1");      resolve();   }).then(function () {      console.log("promise2");   });   console.log("script end");// --------   setTimeout(function () {      console.log('8')   }, 0)   async function async1() {      console.log('1')      const data = await async2()      console.log('6')      return data   }   async function async2() {      return new Promise(resolve => {         console.log('2')         resolve('async2的结果')      }).then(data => {         console.log('4')         return data      })   }   async1().then(data => {      console.log('7')      console.log(data)   })   new Promise(function (resolve) {      console.log('3')      resolve()   }).then(function () {      console.log('5')   })//illegalscript start  async1 start  async2  promise1  illegalscript end  async1 end  promise2// setTimeout//script start  async2 end  Promise  script end  async1 end  promise1  promise2  setTimeout//script start  async1 start  async2 promise1  script end  async1 end  promise2  setTimeout//40   var x = 3;   var y = 4;   var obj = {      x: 1,      y: 6,      getX: function () {         var x = 5;         return function () {            return this.x;         }();      },      getY: function () {         var y = 7;         return this.y;      }   }   console.log(obj.getX()) //3   console.log(obj.getY()) //6// -------   var name = "the window";   var object = {      name: "My Object",      getName: function () {         return this.name;      }   }   object.getName(); //My Object   (object.getName)(); //My Object   ******   console.log(object.getName() === (object.getName)())   (object.getName = object.getName)();//the window// -------   var a = 10;   var obt = {      a: 20,      fn: function () {         var a = 30;         console.log(this.a)      }   }   obt.fn(); //20   obt.fn.call(); //10   (obt.fn)();  //20   (obt.fn, obt.fn)(); //10   *****   new obt.fn(); //undefined   *****// -------   function a(xx) {      this.x = xx;      return this   };   var x = a(5);   var y = a(6);   console.log(x.x) //undefined   *******   console.log(y.x)  //6//---------   const object = {      who: 'World',      greet() {         console.log('this1', this)         return `Hello, ${this.who}!`;      },      farewell: () => {         console.log('this,', this)         return `Goodbye, ${this.who}!`;      }   };   console.log(object.greet()); // hello world   console.log(object.farewell()); // goodbye undefined  &&&&&&&&7//----------   var length = 4;   function callback() {      console.log(this.length); // 输出什么   }   const object = {      length: 5,      method() {         arguments[0]();      }   };   object.method(callback, 1, 2); //3 *******//----------   setTimeout(function () {      console.log(1)   }, 0);   new Promise(function (resolve, reject) {      console.log(2)      for (var i = 0; i < 10000; i++) {         if (i === 10) {            console.log(10)         }         i == 9999 && resolve();      }      console.log(3)   }).then(function () {      console.log(4)   })   console.log(5);//-------   for (var i = 0; i < 5; i++) {      setTimeout(function () {         console.log(i);      }, 1000);   }   console.log(i)//------   var arr1 = [1, 2, 5, 8];   var arr2 = arr1;   var str1 = arr1[2];   console.log(arr2);//1,2,5,8   console.log(str1);//5   arr2[4] = 99;   str1 = 6;   console.log(arr1);//1,2,5,8,99   console.log(arr1[2]);//5//-----   console.log(a)//undefined   var a = 0   if (true) {      console.log(a)      a = 1      console.log(a)      function a() {      }      console.log(a)      a = 21      console.log(a)   }   console.log(a)//------   var a = 10, b = 11, c = 12;   console.log(test)   function test(a) {      a = 1      var b = 2      c = 3   }   test(5)   console.log(a) //a为形参 为私有变量   console.log(b)   console.log(c)//----   f1();   console.log(b);   console.log(c);   console.log(a);   function f1() {      var a = b = c = 9;      console.log(a);      // 9 9 9 9 9 (not define)      console.log(b);      // 原因只有a是局部变量      console.log(c);      // b,c都是全局变量   }   let arr = [1, [2, 3, [4, 5]]]   function flatten(arr) {      return arr.join(',').split(',').map(function (item) {         return parseInt(item);      })   }   flatten(arr)//------   Class   EventEmitter   {      constructor()      {         listener:{         }      }      //订阅者      on(type, fn)      {         if (!this.listener[type]) {            this.listener[type] = []         }         this.listener[type].push(fn)      }      //发布者      emit(type, ...args)      {         if (this.listeners[type]) {            this.listener[type].forEach(item => {               item(...args)            })         }      }      //删除事件      off(type)      {         if (this.listener[type]) {            delete this.listeners[type]         }      }   }//call   Function.prototype.call = function (context, ...args) {      var context = context || window      //改变this指向.      context.__proto__.fn = this;      var res = context.fn(...args)      delete context.__proto__.fn;      return res   }}//两数之和let nums = [1, 3, 4, 5, 6, 9, 13, 15, 19, 124, 12, 18, 19, 40]let target = 28;let output = []//[3,4]function add(nums, target) {   console.log(nums[6] + nums[7])   console.log(target)   for (var i = 0; i < nums.length - 1; i++) {      for (var j = i + 1; j < nums.length - 1; j++) {         // console.log('i',i)         // console.log('j',j)         if (nums[i] + nums[j] == target) {            output.push(i)            output.push(j)            // console.log('i',i)         }      }   }}add(nums, target)console.log(output)//贪心算法1let prices = [7, 1, 5, 3, 6, 4]let maxPriceArr = []function tanxin1(prices) {   let maxPrice = 0;   //d对比大小   add(0)   function add(i) {      for (i; i < prices.length - 1; i++) {         for (var j = i + 1; j < prices.length-1; j++) {            //如果后续比前面大 则记录下角标和差值            if (prices[j] > prices[i]) {               maxPrice += (prices[j] - prices[i])               console.log('i',i)               console.log('j',j)               if (j < prices.length-2) {                  add(j)                  return false;               } else {                  maxPriceArr.push(maxPrice)                  return false;               }            }         }      }   }}tanxin1(prices)console.log(maxPriceArr)Class EvenListener{   constructor{      listener:{}   }   //订阅者   on(type,fn){      if(!this.listener[type]){         this.listeners[type] = []         this.listeners[type].push(fn)      }else{         this.listeners[type].push(fn)      }   }   //发布者   emit(type){      if(this.listeners[type]){         this.listeners[type].forEach(item=>{            item(...args)         })      }   }}[1,2,3,4,5].sort(a,b=>0.5-Matn.random())