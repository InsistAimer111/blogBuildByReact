  // 继承的几种方式及其各自的优缺点?   //    1.原型链继承,继承方式是children.prototype = new Parent() children.prototype.func = Parent.function 优点是简单,缺点是多个实例会共享一个原型   // 2.构造函数继承 funtion children(){parent.call(this)} 缺点是不能继承父类的函数方法.   // 3.组合继承   function children(){      Parent.call(this)   }   children.prototype = new Parent()   // 优点是继承了原型链继承和构造函数继承的有点,缺点是执行了2次父类的构造函数.   4.寄生组合式继承   function children(){    parent.call(this)   }   var subtype = new children()   var prototype = object(parent.prototype)   prototype.constrctor = subtype   subtype.protptype = prototype    function fangdou(){       let timeout = null;       clearTimeout(timeout)       timeout = setTimeout(()=>{        //todo       },1000)    }   function jieliu(){        let valid = true;        return function(){            if(!valid){                return falsse            }            valid = false;            settimeout(()=>{                //todo                valid = true            },1000)        }   }   //实现一个once函数   function once(){    let valid = true;    return function(){        if(valid){            //todo            valid = !valid        }    }   }   //实现bind函数   functionn bind = function(){    let that = this;    return function(){        that.call(arguments)    }   }